{"version":3,"file":"components-Accordion-Accordion-stories.de1f86f303fad56857c0.hot-update.js","mappings":";;;;;;;;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;ACgBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;;AACA;AACA;AACA;AACA;AACA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAnGA;AAAA;;AACA;AAAA;;;;;AAUA;AAAA;;AATA;AAHA;AAAA;;AACA;AACA;AACA;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;;AAEA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;;AACA;AAAA;AAAA;AAAA;;AACA;AAAA;AAAA;AACA;AAAA;AAAA;;AAEA;AAAA;AAAA;;AACA;AAEA;AAFA;AACA;AAAA;AAAA;;;;;;AADA;AAAA","sources":["webpack://tailwind-demo/./src/components/Accordion/Accordion.vue?36c2","webpack://tailwind-demo/./src/components/Accordion/Accordion.vue"],"sourcesContent":["// Imports\nvar ___CSS_LOADER_API_IMPORT___ = require(\"../../../node_modules/@storybook/addon-postcss/node_modules/css-loader/dist/runtime/api.js\");\nexports = ___CSS_LOADER_API_IMPORT___(false);\n// Module\nexports.push([module.id, \"\\n.accordion-item[data-v-30a95abe]:hover {\\n  background-color: rgba(0, 0, 0, 0.06);\\n}\\n.accordion-enter-active[data-v-30a95abe],\\n.accordion-leave-active[data-v-30a95abe] {\\n  transition: max-height 0.3s ease;\\n}\\n.accordion-enter[data-v-30a95abe],\\n.accordion-leave-to[data-v-30a95abe]\\n\\n/* .accordion-leave-active in <2.1.8 */\\n  {\\n  max-height: 0;\\n  overflow: hidden;\\n}\\n\", \"\"]);\n// Exports\nmodule.exports = exports;\n","<template>\n  <div :class=\"accordionClasses\">\n    <div class=\"accordion-controls flex justify-between items-center p-4 border-b border-grey-light\">\n      <h2 class=\"text-xl font-semibold\">{{ title }}</h2>\n      <button @click=\"toggleAll\" class=\"text-sm font-medium\">{{ allOpen ? 'Hide all' : 'Show all' }}</button>\n    </div>\n    <div v-for=\"(item, index) in items\" :key=\"index\" :class=\"itemClasses\">\n      <div @click=\"toggle(index)\"\n        :class=\"['accordion-header flex justify-between items-center cursor-pointer p-4', isOpen(index) ? 'bg-grey-lighter' : 'border-b border-grey-light']\">\n        <h3 :class=\"headerClasses\">{{ item.title }}</h3>\n        <span :class=\"chevronClasses\">{{ isOpen(index) ? '▲' : '▼' }}</span>\n      </div>\n      <transition name=\"accordion\">\n        <div v-show=\"isOpen(index)\" class=\"accordion-content p-4 px-6 border-b border-grey-light\">\n          <slot :name=\"`content-${index}`\">{{ item.content }}</slot>\n        </div>\n      </transition>\n    </div>\n  </div>\n</template>\n\n<script>\nexport default {\n  name: 'Accordion',\n  props: {\n    items: {\n      type: Array,\n      required: true,\n    },\n    variant: {\n      type: String,\n      default: 'default', // default, bordered, highlighted, collapsible\n    },\n    title: {\n      type: String,\n      default: 'Accordion',\n    },\n  },\n  data() {\n    return {\n      openIndex: [],\n      allOpen: false,\n    };\n  },\n  computed: {\n    accordionClasses() {\n      return [\n        'accordion',\n        this.variantClasses,\n      ];\n    },\n    itemClasses() {\n      return [\n        'accordion-item',\n        'transition-all',\n        'duration-300',\n        'ease-in-out',\n      ];\n    },\n    headerClasses() {\n      return [\n        'accordion-header',\n        'font-semibold',\n      ];\n    },\n    chevronClasses() {\n      return [\n        'accordion-chevron',\n        'text-xl',\n        'transition-transform',\n      ];\n    },\n    variantClasses() {\n      return {\n        default: '',\n        bordered: 'border border-grey-light',\n        highlighted: 'bg-grey-lighter text-midnight',\n        collapsible: 'bg-white text-midnight',\n      }[this.variant] || '';\n    },\n  },\n  methods: {\n    toggle(index) {\n      if (this.openIndex.includes(index)) {\n        this.openIndex = this.openIndex.filter(i => i !== index);\n      } else {\n        this.openIndex.push(index);\n      }\n    },\n    isOpen(index) {\n      return this.openIndex.includes(index);\n    },\n    toggleAll() {\n      if (this.allOpen) {\n        this.openIndex = [];\n      } else {\n        this.openIndex = this.items.map((_, index) => index);\n      }\n      this.allOpen = !this.allOpen;\n    },\n  },\n};\n</script>\n\n<style scoped>\n.accordion-item:hover {\n  @apply bg-grey-lighter-alpha;\n}\n\n.accordion-enter-active,\n.accordion-leave-active {\n  transition: max-height 0.3s ease;\n}\n\n.accordion-enter,\n.accordion-leave-to\n\n/* .accordion-leave-active in <2.1.8 */\n  {\n  max-height: 0;\n  overflow: hidden;\n}\n</style>\n"],"names":[],"sourceRoot":""}